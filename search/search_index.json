{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Hello, so good to see you","text":"<p>My name is Tobias Ahrens, I am a  by  based in  .</p> <p>Currently, I work as a Senior Software Engineer for Zurich Instruments designing and implementing the best APIs for-high performance Measurement devices.</p> <p>Aside from my job, I like to explore and contribute to new open-source idea. (Like Material for MKDocs, which you should definitely check out at one time.)</p> <p>Check out my work experiences and my personal skill set if you want to know more about me.</p>"},{"location":"experience/","title":"Enducation and Work Experiences","text":"<pre><code>gantt\n    title What has been happening\n    dateFormat  YYYY-MM-DD\n    section Studies\n    Bachelor (Electrical Engineering)     :crit, 2012-08-01,2016-03-01\n    Research Assistant : 2014-03-01,2016-03-01\n    Master (Information Technology)      :crit, 2016-03-01,2017-08-01\n    Student Assistant (Chromases AG) : 2017-03-01,2017-08-01\n    section Working experience\n    Engineer (Baumer AG): 2017-08-01,2018-05-01\n    Software Engineer (Cyfex AG): 2018-05-01, 2020-10-01\n    Senior Software Engineer (Zurich Instruments AG): active,2020-10-01, 2023-10-01</code></pre>"},{"location":"experience/#work-experience","title":"Work experience","text":"<p>Senior Software Engineer (Zurich Instruments AG)</p> <p>since: Okt 2020</p> <p>location: Zurich, Switzerland</p> <ul> <li>Own and maintain several open source python APIs for interfacing with high performance measurement devices.</li> <li>Own and maintain a docs as code framework.</li> <li>Develop RPC applications within an international team.</li> </ul> Software Engineer (Cyfex AG) <p>May 2018 - Okt 2020</p> <p>location: Zurich, Switzerland</p> <ul> <li>Contributing to a medical CAD/CAM software.</li> <li>Write and own restufull APIs (RabitMQ).</li> <li>Teamlead for a group of software engineers.</li> </ul> Development Engineer (Baumer AG) <p>August 2017 - May 2018</p> <p>location: Frauenfeld, Switzerland</p> <ul> <li>Develop realtime operating systems.</li> <li>Develop Matlab scripts for the production lineup.</li> </ul>"},{"location":"experience/#education","title":"Education","text":"<p>M.Sc. in Information Technology</p> <p>location: University of Applied Sciences Mannheim, Germany</p> <p>Majors: Embedded Systems &amp; Signal Processing</p> <p>Grade:  with excellent (1.0)</p> <p>Thesis: 3D measurement on specular surfaces</p> <p>Awards: Mittelstandsstipendium HS Mannheim</p> <p>B.Eng. in Electrical Engineering</p> <p>location: University of Applied Sciences Konstanz, Germany</p> <p>Grade:  with excellent (1.1)</p> <p>Thesis: Data Compression for Flash-Memories (The resulting paper was presented at the IDT)</p> <p>Awards: VDE Leistungspreis, for an excellence bachelor thesis.</p>"},{"location":"private/","title":"More ...","text":"<p>Let's forget for a moment all the coding stuff. The following person is left:</p> <p>A plant loving father and husband</p> <p></p> <p>Although this image is only generated by the stable fusion AI it gives a pretty good estimate of what my apartment would look like if my wife would not stop me from time to time.</p> <p>Most of my spare time I dedicate to nurturing and growing all kinds of plants and flowers. </p>"},{"location":"skills/","title":"Programming Skills","text":"<p>Coming from the world of electrical engineering, I have strong knowledge of low-level programming and signal processing. Over the years, I found my true passion in coding and expanded my horizon ever since.</p> <p>Even though I consider my journey just begun, I have already used and learned so many tools and languages that it would be dull to just list them all. I therefore have decided to filter out the essential parts.</p>"},{"location":"skills/#things-on-my-bucket-list","title":"Things On My Bucket List","text":"<p> deep dive into Elixir ... I love functional programming</p> <p> egui GUI library written in Rust  ... </p>"},{"location":"skills/#daily-friends","title":"Daily Friends","text":"<p>These tools and languages I currently use daily within my job.</p> Language/Tool Skill level ...  Python  Expert Used for basically everything. From scripting and data processing to creating handy bindings to binary libraries.  Proficient The language I learned programming on and choosen by my company to do the heavy lifting part.  Markdown  Expert Used for every documentation stuff (including private nodes).  Git  Proficient Lifesaver, gamechanger ... you name it.  CI/CD  Proficient Automated testing and deployment makes life so much easier  Linux  Competent Although linux is my preferred and daily used os I am frequently reminded that there is so much more to learn about it."},{"location":"skills/#nightly-affairs","title":"Nightly Affairs","text":"<p>Whenever I have a quiet evening, which, frankly speaking, does not happen often these with a small child, I sit on the couch and learn more about the following things.</p> Language/Tool Skill level  Elixir  Beginner  Rust  Beginner"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/02/01/docs-as-code-books/","title":"Docs as Code","text":"<p>Documentation as Code (Docs as Code) refers to the idea of creating and maintaining documentation the same way as code. This might sound like something only useful for software companies, and it is true that especially big tech companies started to embrace that idea. However, if one looks closely, it is not limited to software documentation alone but can be applied to technical documentation in general.</p> <p>Eric Holscher &amp; the Write the Docs community</p> <p>Documentation as Code (Docs as Code) refers to a philosophy that you should be writing documentation with the same tools as code.</p> <p>Let's quickly go over how this idea came about. One part of creating a product, whether it is a program or something else, is to document it. It's the first place users will search for help, and being able to quickly access a complete and up-to-date documentation is key for most users.</p> <p>And before you start arguing that nowadays everyone just googles the answer instead of picking up a manual. Well, the stuff google points to is by definition the documentation of the product. And we better make sure that for our product it is the one we intend it to be and not some shady, probably outdated online forum.  However, more and more products we use are not but receive updates or redesigns. The best example for that is my baking oven that prompted me for a firmware update the other day. Therefore, the job of a technical writer goes way beyond creating documentation from scratch. Nowadays, maintaining and adding new content is probably the bigger part. This is especially true for modern SaaS (Software as a Service) products that get new updates daily. The solution in a lot of software projects is to document their API directly in the code and auto-generate the resulting HTML pages.</p> <p>\u201cDocs as Code\u201d goes a step further. Instead of only auto-generating the API part, it proposes two treat the documentation the same way as code. Meaning to use the same tools, processes, and infrastructure. The reason for that is simple. All challenges modern documentation needs to face, apply for modern software development in the same way. Whether it is versioning, ensuring stability, short release cycles or developed by a large group of people simultaneously.  So instead of reinventing the wheel, documentation can benefit from the existing solutions.</p> <p>So, what does that mean in practice? Documentation should \u2026</p> <ol> <li>\u2026 be written in plain text with special symbols to structure and format the result.</li> <li>\u2026 use distributed version control (e.g., git) to keep track and manage changes in their code.</li> <li>\u2026 use issue tracking to plan and record their tasks.</li> <li>\u2026 be integrated into the software team's and planing.</li> <li>\u2026 implement tests for coverage, stability, wording, spelling and other rules.</li> <li>\u2026 use code reviews to give and receive feedback for changes quickly.</li> <li>\u2026 test, integrate its changes automatically (continuous integration).</li> <li>\u2026 be automatically deployed (continuous delivery).</li> </ol> <p>As a non-programmer, this list can be pretty intimating. It also raises the question whether it is expected that every contributor will become a software developer? But rest assured if done properly I think there are no prerequisites for being able to contribute.</p> <p>Contributing to documentation should be as easy as writing an email</p> <p>What cannot be denied is that technical writers and developers must work together to benefit from this idea. This includes developers to learn how to include documentation in their planing and how to write parts of it themselves. It also means technical writer need to learn how to use the tools and mechanisms mentioned above, but also participate in the overall planing process.</p> <p>The benefit of \u201cDocs as Code\u201d do justify this more than enough. To mention a few:</p> <ul> <li>Every change can be reviewed, discussed and shared immediately through a merge request. This not only prevents email with different version, but also reduces the time to delivery.</li> <li>Everyone can contribute to the documentation in their own way. For programmers, no context switches are necessary to change the documentation. For outsiders, it is easy to change or point out a small section or spelling mistake. And technical writers have imitated feedback on how their changes look like.</li> <li>Thanks to the CI/CD processes, a new version will be released either automatically or by the click of a button. </li> <li>Changes in the design are adapted automatically because Markup languages separate design and content.</li> <li>The documentation is no longer a 3rd wheel in the process, but rather part of the planing and teams. Changes can be reviewed by the technical writing team before they make it into the product.</li> </ul>"}]}